/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.palm.valley.frames;

import com.palm.valley.beans.AccountBean;
import com.palm.valley.beans.UserBean;
import com.palm.valley.dao.AccountDAO;
import com.palm.valley.daoimpl.AccountDAOImpl;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Dell
 */
public class AccountFrame extends javax.swing.JFrame {
    UserBean currentUser ;
    /**
     * Creates new form AccountFrame
     */
    public AccountFrame() {
        initComponents();
        populateAccountTable();
        disableBtn();
    }
    
    public AccountFrame(UserBean user){
         initComponents();
        populateAccountTable();
        disableBtn();
        currentUser = user;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        nameTxtField = new javax.swing.JTextField();
        contactTxtField = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        accountTable = new javax.swing.JTable();
        namelbl = new javax.swing.JLabel();
        contactlbl = new javax.swing.JLabel();
        descriptionlbl = new javax.swing.JLabel();
        updateBtn = new javax.swing.JButton();
        deleteBtn = new javax.swing.JButton();
        addBtn = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        descriptionTxtArea = new javax.swing.JTextArea();
        backBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 48)); // NOI18N
        jLabel1.setText("Account");

        nameTxtField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameTxtFieldActionPerformed(evt);
            }
        });

        accountTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        accountTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                accountTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(accountTable);

        namelbl.setText(" Name");

        contactlbl.setText("Contact");

        descriptionlbl.setText("Description");

        updateBtn.setText("Update");
        updateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateBtnActionPerformed(evt);
            }
        });

        deleteBtn.setText("Delete");
        deleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBtnActionPerformed(evt);
            }
        });

        addBtn.setText("ADD");
        addBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBtnActionPerformed(evt);
            }
        });

        descriptionTxtArea.setColumns(20);
        descriptionTxtArea.setRows(5);
        jScrollPane2.setViewportView(descriptionTxtArea);

        backBtn.setText("Back");
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(backBtn)
                .addGap(263, 263, 263)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(addBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(updateBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(deleteBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(namelbl)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(nameTxtField)
                            .addComponent(contactTxtField, javax.swing.GroupLayout.DEFAULT_SIZE, 280, Short.MAX_VALUE)
                            .addComponent(contactlbl)
                            .addComponent(descriptionlbl)
                            .addComponent(jScrollPane2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 52, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 522, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(48, 48, 48))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(backBtn))
                .addGap(14, 14, 14)
                .addComponent(namelbl)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(nameTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(33, 33, 33)
                        .addComponent(contactlbl)
                        .addGap(18, 18, 18)
                        .addComponent(contactTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(35, 35, 35)
                        .addComponent(descriptionlbl)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 39, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(deleteBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(updateBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(addBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(44, 44, 44))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 287, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void nameTxtFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameTxtFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nameTxtFieldActionPerformed

    private void accountTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_accountTableMouseClicked
        //Integer id = (Integer) accountTable.getValueAt(accountTable.getSelectedRow(),0);
        Integer id = (Integer) accountTable.getModel().getValueAt(accountTable.getSelectedRow(), 0);
       
        AccountDAO accountDAO = new AccountDAOImpl();
        AccountBean accountBean = accountDAO.getAccountById(id);
        
        nameTxtField.setText(accountBean.getName());
        contactTxtField.setText(accountBean.getContact());
        descriptionTxtArea.setText(accountBean.getDescription());
        enableBtn();
    }//GEN-LAST:event_accountTableMouseClicked

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        disableBtn();
        clearFields();
    }//GEN-LAST:event_formMouseClicked

    private void addBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBtnActionPerformed
        addAccount();
        clearFields();
        populateAccountTable();
    }//GEN-LAST:event_addBtnActionPerformed

    private void updateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateBtnActionPerformed
        updateAccount();
        clearFields();
        populateAccountTable();
        disableBtn();
    }//GEN-LAST:event_updateBtnActionPerformed

    private void deleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBtnActionPerformed
        deleteAccount();
        clearFields();
        populateAccountTable();
        disableBtn();
    }//GEN-LAST:event_deleteBtnActionPerformed

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed
        Dashboard dashboard = new Dashboard(currentUser);
        dashboard.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_backBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AccountFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AccountFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AccountFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AccountFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AccountFrame().setVisible(true);
            }
        });
    }
    public void addAccount(){
        String name = nameTxtField.getText();
        String contact = contactTxtField.getText();
        String description = descriptionTxtArea.getText();
        LocalDateTime createdDate = LocalDateTime.now();
        DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
        String createdDates = createdDate.format(dateFormatter);
        Timestamp timestamp = Timestamp.valueOf(createdDates);
        
        AccountBean accountBean = new AccountBean();
        accountBean.setName(name);
        accountBean.setCreatedDate(timestamp);
        accountBean.setCreatedBy(currentUser.getUserId());
        accountBean.setDescription(description);
        accountBean.setContact(contact);
        AccountDAO accountDAO = new AccountDAOImpl();
        int suc = accountDAO.addAccount(accountBean);
        if(suc > 0 ){
            JOptionPane.showMessageDialog(this, "Successfully Added");
            
        }else{
            JOptionPane.showMessageDialog(this, "Unsuccessful Operation!!!");
        }
        
    }
    
    public void deleteAccount(){
        Integer id = (Integer) accountTable.getModel().getValueAt(accountTable.getSelectedRow(), 0);
        LocalDateTime createdDate = LocalDateTime.now();
        DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
        String createdDates = createdDate.format(dateFormatter);
        Timestamp timestamp = Timestamp.valueOf(createdDates);
        
        AccountBean accountBean = new AccountBean();
        accountBean.setModifiedBy(currentUser.getUserId());
        accountBean.setModifiedDate(timestamp);
        accountBean.setAccountId(id);
        AccountDAO accountDAO = new AccountDAOImpl();
        int suc = accountDAO.deleteAccount(accountBean);
        if(suc > 0){
            JOptionPane.showMessageDialog(this, "Successfully Deleted");
            
        }
        else{
            JOptionPane.showMessageDialog(this, "Unsuccessfull Operation");
        }
    }
    
    public void updateAccount(){
        Integer id = (Integer) accountTable.getModel().getValueAt(accountTable.getSelectedRow(), 0);
        String name = nameTxtField.getText();
        String contact = contactTxtField.getText();
        String description = descriptionTxtArea.getText();
        
        LocalDateTime createdDate = LocalDateTime.now();
        DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
        String createdDates = createdDate.format(dateFormatter);
        Timestamp timestamp = Timestamp.valueOf(createdDates);
        
        AccountBean accountBean = new AccountBean();
        accountBean.setName(name);
        accountBean.setModifiedBy(currentUser.getUserId());
        accountBean.setModifiedDate(timestamp);
        accountBean.setDescription(description);
        accountBean.setContact(contact);
        accountBean.setAccountId(id);
        AccountDAO accountDAO = new AccountDAOImpl();
        int suc = accountDAO.updateAccount(accountBean);
        if(suc > 0){
            JOptionPane.showMessageDialog(this, "Successfully Updated");
            
        }
        else{
            JOptionPane.showMessageDialog(this, "Unsuccessfull Operation");
        }
    }
    
    public static DefaultTableModel tableModel (ResultSet rs){
        try {
            ResultSetMetaData metaData = rs.getMetaData();
            Vector<String> columnNames = new Vector<>();
            int columnCount = metaData.getColumnCount();
            System.out.print(columnCount);
            for(int column =1; column <= columnCount; column++){
                columnNames.add(metaData.getColumnName(column));
//                System.out.println("Im in");
            }
            Vector<Vector<Object>> data = new Vector<Vector<Object>>();
            while(rs.next()){
                Vector<Object> vector = new Vector<Object>();
                for(int columnIndex = 1; columnIndex <= columnCount; columnIndex++){
                    vector.add(rs.getObject(columnIndex));
                }
                data.add(vector);
            }
             return  new DefaultTableModel(data,columnNames);
        } catch (SQLException ex) {
           
        }
        return null;
    }
    
    public void populateAccountTable(){
        AccountDAO accountDAO = new AccountDAOImpl();
        ResultSet rst = accountDAO.getAccounts();
        
        accountTable.setModel(tableModel(rst));
        accountTable.removeColumn(accountTable.getColumnModel().getColumn(0));
    }
    
    public void clearFields(){
        nameTxtField.setText("");
        contactTxtField.setText("");
        descriptionTxtArea.setText("");
    }
    
    public void disableBtn(){
        updateBtn.setEnabled(false);
        deleteBtn.setEnabled(false);
        addBtn.setEnabled(true);
    }
    
    public void enableBtn(){
        updateBtn.setEnabled(true);
        deleteBtn.setEnabled(true);
        addBtn.setEnabled(false);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable accountTable;
    private javax.swing.JButton addBtn;
    private javax.swing.JButton backBtn;
    private javax.swing.JTextField contactTxtField;
    private javax.swing.JLabel contactlbl;
    private javax.swing.JButton deleteBtn;
    private javax.swing.JTextArea descriptionTxtArea;
    private javax.swing.JLabel descriptionlbl;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField nameTxtField;
    private javax.swing.JLabel namelbl;
    private javax.swing.JButton updateBtn;
    // End of variables declaration//GEN-END:variables
}
