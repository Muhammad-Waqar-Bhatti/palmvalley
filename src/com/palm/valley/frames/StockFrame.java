/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.palm.valley.frames;

import com.palm.valley.beans.AccountBean;
import com.palm.valley.beans.CategoryBean;
import com.palm.valley.beans.ProductBean;
import com.palm.valley.beans.StockBean;
import com.palm.valley.beans.UserBean;
import com.palm.valley.dao.AccountDAO;
import com.palm.valley.dao.CategoryDAO;
import com.palm.valley.dao.ProductDAO;
import com.palm.valley.dao.StockDAO;
import com.palm.valley.daoimpl.AccountDAOImpl;
import com.palm.valley.daoimpl.CategoryDAOImpl;
import com.palm.valley.daoimpl.ProductDAOImpl;
import com.palm.valley.daoimpl.StockDAOImpl;
import java.awt.Color;
import static java.lang.Double.parseDouble;
import static java.lang.Integer.parseInt;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Dell
 */
public class StockFrame extends javax.swing.JFrame {
    UserBean currentUser ;
    /**
     * Creates new form StockFrame
     */
    public StockFrame() {
        initComponents();
        populateStockTable();
        populateAccountCombo();
        populateProductCombo();
        disableBtn();
    }
    
    public StockFrame(UserBean user){
        initComponents();
        currentUser = user;
        populateStockTable();
       populateAccountCombo();
       disableBtn();
       populateProductCombo();
    
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        nameTxtField = new javax.swing.JTextField();
        quantityTxtField = new javax.swing.JTextField();
        wholeSalePriceTxtField = new javax.swing.JTextField();
        retailPriceTxtField = new javax.swing.JTextField();
        namelbl = new javax.swing.JLabel();
        quantitylbl = new javax.swing.JLabel();
        wholesalepricelbl = new javax.swing.JLabel();
        reatailerpricelbl = new javax.swing.JLabel();
        accountslbl = new javax.swing.JLabel();
        accountCombo = new javax.swing.JComboBox<>();
        addBtn = new javax.swing.JButton();
        updateBtn = new javax.swing.JButton();
        deleteBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        stockTable = new javax.swing.JTable();
        backbtn = new javax.swing.JButton();
        productCombo = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 48)); // NOI18N
        jLabel1.setText("Stock");

        nameTxtField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                nameTxtFieldMouseClicked(evt);
            }
        });

        quantityTxtField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                quantityTxtFieldMouseClicked(evt);
            }
        });

        wholeSalePriceTxtField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                wholeSalePriceTxtFieldMouseClicked(evt);
            }
        });

        retailPriceTxtField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                retailPriceTxtFieldMouseClicked(evt);
            }
        });

        namelbl.setText("Name");

        quantitylbl.setText("Quantity");

        wholesalepricelbl.setText("Whole Sale Price");

        reatailerpricelbl.setText("Retailer Price");

        accountslbl.setText("Accounts");

        accountCombo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                accountComboMouseClicked(evt);
            }
        });

        addBtn.setText("ADD");
        addBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBtnActionPerformed(evt);
            }
        });

        updateBtn.setText("UPDATE");
        updateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateBtnActionPerformed(evt);
            }
        });

        deleteBtn.setText("DELETE");
        deleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBtnActionPerformed(evt);
            }
        });

        stockTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        stockTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                stockTableMouseClicked(evt);
            }
        });
        stockTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                stockTableKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(stockTable);

        backbtn.setText("Back");
        backbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backbtnActionPerformed(evt);
            }
        });

        jLabel2.setText("Product");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(namelbl)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(nameTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 249, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(productCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 249, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel2))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 53, Short.MAX_VALUE)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1143, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(26, 26, 26))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(quantitylbl)
                                .addComponent(quantityTxtField, javax.swing.GroupLayout.DEFAULT_SIZE, 249, Short.MAX_VALUE)
                                .addComponent(wholeSalePriceTxtField, javax.swing.GroupLayout.DEFAULT_SIZE, 249, Short.MAX_VALUE)
                                .addComponent(wholesalepricelbl)
                                .addComponent(retailPriceTxtField, javax.swing.GroupLayout.DEFAULT_SIZE, 249, Short.MAX_VALUE)
                                .addComponent(reatailerpricelbl)
                                .addComponent(accountslbl)
                                .addComponent(accountCombo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(addBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(updateBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(30, 30, 30)
                                .addComponent(deleteBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(backbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(319, 319, 319)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(backbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(namelbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(nameTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(quantitylbl)
                        .addGap(4, 4, 4)
                        .addComponent(quantityTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(19, 19, 19)
                        .addComponent(wholesalepricelbl)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(wholeSalePriceTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(19, 19, 19)
                        .addComponent(reatailerpricelbl)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(retailPriceTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(accountslbl)
                        .addGap(18, 18, 18)
                        .addComponent(accountCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(productCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 513, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 63, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(deleteBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(updateBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(110, 110, 110))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void stockTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_stockTableMouseClicked
        Integer id = (Integer) stockTable.getModel().getValueAt(stockTable.getSelectedRow(), 0);
        StockDAO stockDAO = new StockDAOImpl();
        StockBean stockBean = stockDAO.getStockById(id);
        nameTxtField.setText(stockBean.getName());
        quantityTxtField.setText(String.valueOf(stockBean.getQuantity()));
        wholeSalePriceTxtField.setText(String.valueOf(stockBean.getWhoelSalePrice()));
        retailPriceTxtField.setText(String.valueOf(stockBean.getRetailPrice()));
        accountCombo.setSelectedItem(stockBean.getAccount().getName());
        backToNormalFields();
        enableBtn();
    }//GEN-LAST:event_stockTableMouseClicked

    private void addBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBtnActionPerformed
        addStock();
        clearFields();
        populateStockTable();
    }//GEN-LAST:event_addBtnActionPerformed

    private void stockTableKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_stockTableKeyPressed
         Integer id = (Integer) stockTable.getModel().getValueAt(stockTable.getSelectedRow(), 0);
        StockDAO stockDAO = new StockDAOImpl();
        StockBean stockBean = stockDAO.getStockById(id);
        nameTxtField.setText(stockBean.getName());
        quantityTxtField.setText(String.valueOf(stockBean.getQuantity()));
        wholeSalePriceTxtField.setText(String.valueOf(stockBean.getWhoelSalePrice()));
        retailPriceTxtField.setText(String.valueOf(stockBean.getRetailPrice()));
        accountCombo.setSelectedItem(stockBean.getAccount().getName());
        
    }//GEN-LAST:event_stockTableKeyPressed

    private void updateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateBtnActionPerformed
        updateStock();
        clearFields();
        populateStockTable();
        disableBtn();
    }//GEN-LAST:event_updateBtnActionPerformed

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        clearFields();
        disableBtn();
    }//GEN-LAST:event_formMouseClicked

    private void deleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBtnActionPerformed
        deleteStock();
        clearFields();
        populateStockTable();
        disableBtn();
    }//GEN-LAST:event_deleteBtnActionPerformed

    private void nameTxtFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_nameTxtFieldMouseClicked
        namelbl.setText("Name ");
        namelbl.setForeground(Color.BLACK);
    }//GEN-LAST:event_nameTxtFieldMouseClicked

    private void quantityTxtFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_quantityTxtFieldMouseClicked
        quantitylbl.setText("Quantity");
        quantitylbl.setForeground(Color.BLACK);
    }//GEN-LAST:event_quantityTxtFieldMouseClicked

    private void wholeSalePriceTxtFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_wholeSalePriceTxtFieldMouseClicked
        wholesalepricelbl.setText("Whole Sale Price");
        wholesalepricelbl.setForeground(Color.BLACK);
    }//GEN-LAST:event_wholeSalePriceTxtFieldMouseClicked

    private void retailPriceTxtFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_retailPriceTxtFieldMouseClicked
        reatailerpricelbl.setText("Retail price");
        reatailerpricelbl.setForeground(Color.BLACK);
        
    }//GEN-LAST:event_retailPriceTxtFieldMouseClicked

    private void accountComboMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_accountComboMouseClicked
        accountslbl.setText("Select Account");
        accountslbl.setForeground(Color.BLACK);
    }//GEN-LAST:event_accountComboMouseClicked

    private void backbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backbtnActionPerformed
        Dashboard dashboard = new Dashboard(currentUser);
        dashboard.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_backbtnActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(StockFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(StockFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(StockFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(StockFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new StockFrame().setVisible(true);
            }
        });
    }
    public void addStock(){
        Boolean valid = validateFields();
        if(valid){
            String name = nameTxtField.getText();
            Integer quantity = 0;
            Double wholeSalePrice =0.00;
            Double retailPrice =0.00;
            String accountName = accountCombo.getSelectedItem().toString();
            String productName = productCombo.getSelectedItem().toString();
            
            if(!wholeSalePriceTxtField.getText().isEmpty()){
                 wholeSalePrice = parseDouble(wholeSalePriceTxtField.getText());
            }
            if(!quantityTxtField.getText().isEmpty()){
                quantity = parseInt(quantityTxtField.getText());
            }
            if(!retailPriceTxtField.getText().isEmpty()){
                retailPrice = parseDouble(retailPriceTxtField.getText());
            }
            //Timestamp modified and created 
            LocalDateTime createdDate = LocalDateTime.now();
            DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String createdDates = createdDate.format(dateFormatter);
            Timestamp timestamp = Timestamp.valueOf(createdDates);

            StockBean stockBean = new StockBean();
            stockBean.setName(name);
            stockBean.setQuantity(quantity);
            stockBean.setRetailPrice(retailPrice);
            stockBean.setWhoelSalePrice(wholeSalePrice);
            stockBean.setCreatedBy(currentUser.getUserId());
            stockBean.setCreatedDate(timestamp);
            stockBean.setModifiedBy(currentUser.getUserId());
            stockBean.setModifiedDate(timestamp);
            AccountDAO accountDAO = new AccountDAOImpl();
            AccountBean accountBean = accountDAO.getAccountByName(accountName);
            ProductDAO productDAO = new ProductDAOImpl();
            ProductBean productBean = productDAO.getProductByName(productName);
            stockBean.setAccount(accountBean);
            stockBean.setProduct(productBean);
            StockDAO stockDAO = new StockDAOImpl();
            int suc=0;
            if(accountCombo.getSelectedIndex() == 0 ){
               accountslbl.setText("Select Account ");
               accountslbl.setForeground(Color.red);
            }else{
                suc = stockDAO.addStock(stockBean);
                if(suc>0){ 
                    ProductDAO productsDAO = new ProductDAOImpl();
                    ProductBean productsBean = productsDAO.getProductById(productBean.getProductId());
                    ProductBean product = new ProductBean();
                    product.setProductId(productsBean.getProductId());
                    product.setPrice(stockBean.getRetailPrice());
                    product.setQuantity(productsBean.getQuantity()+stockBean.getQuantity());
                    product.setBarcode(productsBean.getBarcode());
                    CategoryBean category = new CategoryBean();
                    category.setCategoryId(productsBean.getCategory().getCategoryId());
                    product.setCategory(category);
                    product.setName(productsBean.getName());
                    product.setSize(productsBean.getSize());
                    product.setCreatedBy(currentUser.getUserId());
                    product.setModifiedBy(currentUser.getUserId());
                    product.setModifiedDate(timestamp);
                    product.setCreatedDate(timestamp);
                    int row  = productsDAO.updateProduct(product);
                    
                 }else{
                    JOptionPane.showMessageDialog(this, "Operation Failed!!!");
                 }
            }
            
        }
    }
    
    public void updateStock(){
        Integer id = (Integer) stockTable.getModel().getValueAt(stockTable.getSelectedRow(), 0);
        String name = nameTxtField.getText();
        Integer quantity = 0;
        Double wholeSalePrice =0.00;
        Double retailPrice =0.00;
        String accountName = accountCombo.getSelectedItem().toString();
        
        if(!wholeSalePriceTxtField.getText().isEmpty()){
             wholeSalePrice = parseDouble(wholeSalePriceTxtField.getText());
        }
        if(!quantityTxtField.getText().isEmpty()){
            quantity = parseInt(quantityTxtField.getText());
        }
        if(!retailPriceTxtField.getText().isEmpty()){
            retailPrice = parseDouble(retailPriceTxtField.getText());
        }
        //Timestamp modified and created 
        LocalDateTime createdDate = LocalDateTime.now();
        DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
        String createdDates = createdDate.format(dateFormatter);
        Timestamp timestamp = Timestamp.valueOf(createdDates);
        
        StockBean stockBean = new StockBean();
        stockBean.setStockId(id);
        stockBean.setName(name);
        stockBean.setQuantity(quantity);
        stockBean.setRetailPrice(retailPrice);
        stockBean.setWhoelSalePrice(wholeSalePrice);
        stockBean.setModifiedBy(currentUser.getUserId());
        stockBean.setModifiedDate(timestamp);
        AccountDAO accountDAO = new AccountDAOImpl();
        AccountBean accountBean = accountDAO.getAccountByName(accountName);
        
        stockBean.setAccount(accountBean);
        
        StockDAO stockDAO = new StockDAOImpl();
        int suc = stockDAO.updateStock(stockBean);
        
        if(suc>0){ 
            JOptionPane.showMessageDialog(this, "Successfully Updated");
        }else{
            JOptionPane.showMessageDialog(this, "Operation Failed!!!");
        }
    }
    
    public void deleteStock(){
        Integer id = (Integer) stockTable.getModel().getValueAt(stockTable.getSelectedRow(), 0);
        
         //Timestamp modified 
        LocalDateTime createdDate = LocalDateTime.now();
        DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
        String createdDates = createdDate.format(dateFormatter);
        Timestamp timestamp = Timestamp.valueOf(createdDates);
        
        StockBean stock = new StockBean();
        stock.setStockId(id);
        stock.setModifiedBy(currentUser.getUserId());
        stock.setModifiedDate(timestamp);
        
        StockDAO stockDAO = new StockDAOImpl();
        int suc = stockDAO.deleteStock(stock);
        
        if(suc>0){ 
            JOptionPane.showMessageDialog(this, "Successfully Deleted");
        }else{
            JOptionPane.showMessageDialog(this, "Operation Failed!!!");
        }
        
    }
    public static DefaultTableModel tableModel (ResultSet rs){
        try {
            ResultSetMetaData metaData = rs.getMetaData();
            Vector<String> columnNames = new Vector<>();
            int columnCount = metaData.getColumnCount();
            System.out.print(columnCount);
            for(int column =1; column <= columnCount; column++){
                columnNames.add(metaData.getColumnName(column));
//                System.out.println("Im in");
            }
            Vector<Vector<Object>> data = new Vector<Vector<Object>>();
            while(rs.next()){
                Vector<Object> vector = new Vector<Object>();
                for(int columnIndex = 1; columnIndex <= columnCount; columnIndex++){
                    vector.add(rs.getObject(columnIndex));
                }
                data.add(vector);
            }
             return  new DefaultTableModel(data,columnNames);
        } catch (SQLException ex) {
           
        }
        return null;
    }
    
     public void populateStockTable(){
        StockDAO stockDAO = new StockDAOImpl();
        ResultSet rst = stockDAO.getStocks();
        
        stockTable.setModel(tableModel(rst));
       stockTable.removeColumn(stockTable.getColumnModel().getColumn(0));
    }
     
    public void populateProductCombo(){
     ProductDAO productDAO = new ProductDAOImpl();
     List<ProductBean> productList =  productDAO.getProductList();
     productCombo.addItem("Select Product");
     for(ProductBean product: productList){
         productCombo.addItem(product.getName());
     }
     
    }
    public void populateAccountCombo(){
       AccountDAO accountDAO = new AccountDAOImpl();
       List<AccountBean> accountList = accountDAO.getAccount();
       accountCombo.addItem("Select Account");
       for(AccountBean account : accountList){
           accountCombo.addItem(account.getName());
           
       }
        
    } 
     
    public void clearFields(){
        nameTxtField.setText("");
        quantityTxtField.setText("");
        wholeSalePriceTxtField.setText("");
        retailPriceTxtField.setText("");
        accountCombo.setSelectedItem("Select Account");
    }
    
    public void disableBtn(){
        updateBtn.setEnabled(false);
        deleteBtn.setEnabled(false);
        addBtn.setEnabled(true);
    }
    
    public void enableBtn(){
        updateBtn.setEnabled(true);
        deleteBtn.setEnabled(true);
        addBtn.setEnabled(false);
    }
    public Boolean validateFields(){
        Boolean valid = true;
        if(nameTxtField.getText().isEmpty()){
            namelbl.setText("Name Required");
            namelbl.setForeground(Color.red);
            valid = false;
        }
        if(quantityTxtField.getText().isEmpty()){
            quantitylbl.setText("Quantity Required");
            quantitylbl.setForeground(Color.red);
            valid = false;
        }
        if(wholeSalePriceTxtField.getText().isEmpty()){
            wholesalepricelbl.setText("Whole Sale Price is Required");
            wholesalepricelbl.setForeground(Color.red);
            valid = false;
        }
        
        if(retailPriceTxtField.getText().isEmpty()){
             reatailerpricelbl.setText("Retail Price is Required");
            reatailerpricelbl.setForeground(Color.red);
            valid = false;
        }
        
        if(accountCombo.getSelectedIndex()==0){
            accountslbl.setText("Select Account");
            accountslbl.setForeground(Color.red);
            valid = false;
        }
        return valid;
    }
    public void backToNormalFields(){
        namelbl.setText("Name ");
        namelbl.setForeground(Color.BLACK);
        quantitylbl.setText("Quantity");
        quantitylbl.setForeground(Color.BLACK);
        wholesalepricelbl.setText("Whole Sale Price");
        wholesalepricelbl.setForeground(Color.BLACK);
        reatailerpricelbl.setText("Retail price");
        reatailerpricelbl.setForeground(Color.BLACK);
        accountslbl.setText("Select Account");
        accountslbl.setForeground(Color.BLACK);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> accountCombo;
    private javax.swing.JLabel accountslbl;
    private javax.swing.JButton addBtn;
    private javax.swing.JButton backbtn;
    private javax.swing.JButton deleteBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField nameTxtField;
    private javax.swing.JLabel namelbl;
    private javax.swing.JComboBox<String> productCombo;
    private javax.swing.JTextField quantityTxtField;
    private javax.swing.JLabel quantitylbl;
    private javax.swing.JLabel reatailerpricelbl;
    private javax.swing.JTextField retailPriceTxtField;
    private javax.swing.JTable stockTable;
    private javax.swing.JButton updateBtn;
    private javax.swing.JTextField wholeSalePriceTxtField;
    private javax.swing.JLabel wholesalepricelbl;
    // End of variables declaration//GEN-END:variables
}
