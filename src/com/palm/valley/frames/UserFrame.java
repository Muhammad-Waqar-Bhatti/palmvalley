/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.palm.valley.frames;

import com.palm.valley.beans.UserBean;
import com.palm.valley.dao.UserDAO;
import com.palm.valley.daoimpl.UserDAOImpl;
import com.palm.valley.enums.UserType;
import java.awt.Color;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.sql.Date;
import java.sql.Timestamp;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Locale;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Dell
 */
public class UserFrame extends javax.swing.JFrame {
    UserBean currentUser;
    /**
     * Creates new form User
     * @param user
     */
    public UserFrame(UserBean user) {
        initComponents();
        currentUser = user;
       
       populateUserTypeCombo();
        populateUserTable();
        deleteBtn.setEnabled(false);
        updateBtn.setEnabled(false);
        
    }

    private UserFrame() {
        initComponents();
        populateUserTypeCombo();
        populateUserTable();
        deleteBtn.setEnabled(false);
        updateBtn.setEnabled(false);
        
    }
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        fullNameTxtField = new javax.swing.JTextField();
        userNameTxtField = new javax.swing.JTextField();
        userPassTxtField = new javax.swing.JTextField();
        contactTxtField = new javax.swing.JTextField();
        NICTxtField = new javax.swing.JTextField();
        userTypeCombo = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        userTable = new javax.swing.JTable();
        updateBtn = new javax.swing.JButton();
        addBtn = new javax.swing.JButton();
        deleteBtn = new javax.swing.JButton();
        comboError = new javax.swing.JLabel();
        birthDate = new com.toedter.calendar.JDateChooser();
        fullnamelbl = new javax.swing.JLabel();
        usernamelbl = new javax.swing.JLabel();
        passwordlbl = new javax.swing.JLabel();
        contactlbl = new javax.swing.JLabel();
        niclbl = new javax.swing.JLabel();
        usertypelbl = new javax.swing.JLabel();
        doblbl = new javax.swing.JLabel();
        backBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        jLabel1.setText("User");

        fullNameTxtField.setNextFocusableComponent(userNameTxtField);
        fullNameTxtField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fullNameTxtFieldMouseClicked(evt);
            }
        });
        fullNameTxtField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fullNameTxtFieldActionPerformed(evt);
            }
        });

        userNameTxtField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                userNameTxtFieldMouseClicked(evt);
            }
        });

        userPassTxtField.setEnabled(false);
        userPassTxtField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                userPassTxtFieldMouseClicked(evt);
            }
        });
        userPassTxtField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                userPassTxtFieldActionPerformed(evt);
            }
        });

        contactTxtField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                contactTxtFieldMouseClicked(evt);
            }
        });
        contactTxtField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                contactTxtFieldActionPerformed(evt);
            }
        });

        NICTxtField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                NICTxtFieldMouseClicked(evt);
            }
        });
        NICTxtField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NICTxtFieldActionPerformed(evt);
            }
        });

        userTypeCombo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                userTypeComboFocusGained(evt);
            }
        });
        userTypeCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                userTypeComboActionPerformed(evt);
            }
        });

        userTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        userTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                userTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(userTable);

        updateBtn.setText("UPDATE");
        updateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateBtnActionPerformed(evt);
            }
        });

        addBtn.setText("ADD");
        addBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBtnActionPerformed(evt);
            }
        });

        deleteBtn.setText("DELETE");
        deleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBtnActionPerformed(evt);
            }
        });

        comboError.setForeground(new java.awt.Color(255, 51, 51));

        birthDate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                birthDateFocusGained(evt);
            }
        });

        fullnamelbl.setText("Full Name");

        usernamelbl.setText("User Name");

        passwordlbl.setText("Password");

        contactlbl.setText("Contact");

        niclbl.setText("National Identity Card");

        usertypelbl.setText("Select User Type");

        doblbl.setText("Date of Birth");

        backBtn.setText("Back");
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(57, 57, 57)
                .addComponent(addBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(45, 45, 45)
                .addComponent(updateBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(45, 45, 45)
                .addComponent(deleteBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(625, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(57, 57, 57)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(userNameTxtField, javax.swing.GroupLayout.DEFAULT_SIZE, 263, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(NICTxtField, javax.swing.GroupLayout.DEFAULT_SIZE, 258, Short.MAX_VALUE)
                                    .addComponent(niclbl))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(comboError, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(contactTxtField, javax.swing.GroupLayout.DEFAULT_SIZE, 263, Short.MAX_VALUE)
                            .addComponent(contactlbl)
                            .addComponent(userPassTxtField, javax.swing.GroupLayout.DEFAULT_SIZE, 263, Short.MAX_VALUE)
                            .addComponent(passwordlbl)
                            .addComponent(usernamelbl)
                            .addComponent(birthDate, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(doblbl)
                            .addComponent(fullnamelbl)
                            .addComponent(usertypelbl)
                            .addComponent(userTypeCombo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(fullNameTxtField)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(backBtn)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 584, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 412, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(backBtn)
                        .addGap(22, 22, 22)
                        .addComponent(fullnamelbl)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fullNameTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)
                        .addComponent(usernamelbl)
                        .addGap(3, 3, 3)
                        .addComponent(userNameTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28)
                        .addComponent(usertypelbl)
                        .addGap(4, 4, 4)
                        .addComponent(userTypeCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(passwordlbl)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(userPassTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(contactlbl)
                        .addGap(3, 3, 3)
                        .addComponent(contactTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(34, 34, 34)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(comboError)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(niclbl)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(NICTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(37, 37, 37)
                .addComponent(doblbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(birthDate, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 90, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(deleteBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(updateBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(36, 36, 36))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBtnActionPerformed
        addUser();
        populateUserTable();
        clearFields();
    }//GEN-LAST:event_addBtnActionPerformed

    private void userTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_userTableMouseClicked
        Integer id = (Integer) userTable.getModel().getValueAt(userTable.getSelectedRow(),0);
        UserDAO userDAO = new UserDAOImpl();
        UserBean user = userDAO.getUserById(id);
        userNameTxtField.setText(user.getUserName());
        fullNameTxtField.setText(user.getFullName());
        userPassTxtField.setText(user.getPassword());
        NICTxtField.setText(user.getNic());
        contactTxtField.setText(user.getContact());
        userTypeCombo.setSelectedItem(user.getUserType());
        birthDate.setDate(user.getDateOfBirth());
        addBtn.setEnabled(false);
        deleteBtn.setEnabled(true);
        updateBtn.setEnabled(true);
    }//GEN-LAST:event_userTableMouseClicked

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        addBtn.setEnabled(true);
        deleteBtn.setEnabled(false);
        updateBtn.setEnabled(false);
        clearFields();
    }//GEN-LAST:event_formMouseClicked

    private void updateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateBtnActionPerformed
        // TODO add your handling code here:
        updateUser();
        clearFields();
        populateUserTable();
        addBtn.setEnabled(true);
        deleteBtn.setEnabled(false);
        updateBtn.setEnabled(false);
    }//GEN-LAST:event_updateBtnActionPerformed

    private void deleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBtnActionPerformed
        // TODO add your handling code here:
        deleteUser();
        populateUserTable();
        clearFields();
        addBtn.setEnabled(true);
        deleteBtn.setEnabled(false);
        updateBtn.setEnabled(false);
    }//GEN-LAST:event_deleteBtnActionPerformed

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed
        Dashboard dashboard = new Dashboard(currentUser);
        dashboard.setVisible(true);
        this.setVisible(false);
        
    }//GEN-LAST:event_backBtnActionPerformed

    private void fullNameTxtFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fullNameTxtFieldActionPerformed
       fullnamelbl.setText("Full Name");
       fullnamelbl.setForeground(Color.BLACK);
    }//GEN-LAST:event_fullNameTxtFieldActionPerformed

    private void userPassTxtFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_userPassTxtFieldActionPerformed
        
    }//GEN-LAST:event_userPassTxtFieldActionPerformed

    private void contactTxtFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_contactTxtFieldActionPerformed
        contactlbl.setText("Contact");
        contactlbl.setForeground(Color.BLACK);
    }//GEN-LAST:event_contactTxtFieldActionPerformed

    private void NICTxtFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NICTxtFieldActionPerformed
        niclbl.setText("NIC");
        niclbl.setForeground(Color.BLACK);
    }//GEN-LAST:event_NICTxtFieldActionPerformed

    private void fullNameTxtFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fullNameTxtFieldMouseClicked
      fullnamelbl.setText("Full Name");
       fullnamelbl.setForeground(Color.BLACK);
    }//GEN-LAST:event_fullNameTxtFieldMouseClicked

    private void userNameTxtFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_userNameTxtFieldMouseClicked
        usernamelbl.setText("User Name");
        usernamelbl.setForeground(Color.BLACK);
    }//GEN-LAST:event_userNameTxtFieldMouseClicked

    private void userPassTxtFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_userPassTxtFieldMouseClicked
        passwordlbl.setText("Password");
        passwordlbl.setForeground(Color.BLACK);
    }//GEN-LAST:event_userPassTxtFieldMouseClicked

    private void contactTxtFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_contactTxtFieldMouseClicked
        contactlbl.setText("Contact ");
        contactlbl.setForeground(Color.BLACK);
    }//GEN-LAST:event_contactTxtFieldMouseClicked

    private void NICTxtFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_NICTxtFieldMouseClicked
        niclbl.setText("Nation Identithy Card");
        niclbl.setForeground(Color.BLACK);
    }//GEN-LAST:event_NICTxtFieldMouseClicked

    private void userTypeComboFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_userTypeComboFocusGained
        usertypelbl.setText("Select  User Type");
        usertypelbl.setForeground(Color.BLACK);
    }//GEN-LAST:event_userTypeComboFocusGained

    private void birthDateFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_birthDateFocusGained
      doblbl.setText("Date of Birth");
      doblbl.setForeground(Color.BLACK);
    }//GEN-LAST:event_birthDateFocusGained

    private void userTypeComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_userTypeComboActionPerformed
        if(userTypeCombo.getSelectedItem()== UserType.USER.toString()){
            userPassTxtField.setEnabled(true);
        }
        else{
            userPassTxtField.setEnabled(false);
        }
      
    }//GEN-LAST:event_userTypeComboActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UserFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UserFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UserFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UserFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UserFrame().setVisible(true);
            }
        });
    }
    public void addUser(){
        Boolean valid = validateFields();     
        if(valid){
            String userName = userNameTxtField.getText();
            String fullName = fullNameTxtField.getText();
            String password = userPassTxtField.getText();
            String nic = NICTxtField.getText();
            String contact = contactTxtField.getText();
            String userType = userTypeCombo.getSelectedItem().toString();
            DateFormat sdf = new SimpleDateFormat("yyyy-MM-dd",Locale.getDefault());
            String date = sdf.format(birthDate.getDate());


            UserBean userBean = new UserBean();
            userBean.setFullName(fullName);
            userBean.setUserName(userName);
            userBean.setPassword(password);
            userBean.setNic(nic);
            userBean.setContact(contact);
            userBean.setDateOfBirth(Date.valueOf(date));
            //created Date
            LocalDateTime createdDate = LocalDateTime.now();
            DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String createdDates = createdDate.format(dateFormatter);
            Timestamp timestamp = Timestamp.valueOf(createdDates);
            // Current user
            userBean.setCreatedBy(currentUser.getUserId());
            userBean.setCreatedDate(timestamp);
            if(!userType.equals(userTypeCombo.getItemAt(0))){
                userBean.setUserType(userType);
            }
            else{
                comboError.setText("Select User Type");
                comboError.setForeground(Color.red);
            }
            UserDAO userDAO = new UserDAOImpl();
            int suc = userDAO.addUser(userBean);
            if (suc > 0){
                JOptionPane.showMessageDialog(this,"Successfully Added");
            } 
            else{
                JOptionPane.showMessageDialog(this, "Unsuccessfull Operation");
            }
        } 
            
        
            
    }
    
    public void deleteUser(){
        Integer id = (Integer) userTable.getModel().getValueAt(userTable.getSelectedRow(),0);
        
        UserDAO userDAO = new UserDAOImpl();
        UserBean user = new UserBean ();
        LocalDateTime createdDate = LocalDateTime.now();
        DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
        String createdDates = createdDate.format(dateFormatter);
        Timestamp timestamp = Timestamp.valueOf(createdDates);
        user.setUserId(id);
        user.setModifiedDate(timestamp);
        user.setModifiedBy(currentUser.getUserId());
        
        int suc = userDAO.deleteUser(user);
        if (suc > 0){
            JOptionPane.showMessageDialog(this,"Record Deleted ");
        } 
        else{
            JOptionPane.showMessageDialog(this, "Unsuccessfull Operation");
        }
    }
    
    public void updateUser(){
        Integer id = (Integer) userTable.getModel().getValueAt(userTable.getSelectedRow(),0);
      System.out.println(id);
        
        String userName = userNameTxtField.getText();
        String fullName = fullNameTxtField.getText();
        String password = userPassTxtField.getText();
        String nic = NICTxtField.getText();
        String contact = contactTxtField.getText();
        String userType = userTypeCombo.getSelectedItem().toString();
        DateFormat sdf = new SimpleDateFormat("yyyy-MM-dd",Locale.getDefault());
        String date = sdf.format(birthDate.getDate());
        //modified date
        LocalDateTime createdDate = LocalDateTime.now();
        DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
        String createdDates = createdDate.format(dateFormatter);
        Timestamp timestamp = Timestamp.valueOf(createdDates);
        //userbean
        UserBean userBean = new UserBean();
        userBean.setFullName(fullName);
        userBean.setUserName(userName);
        userBean.setPassword(password);
        userBean.setNic(nic);
        userBean.setContact(contact);
        userBean.setUserType(userType);
        userBean.setUserId(id);
        userBean.setDateOfBirth(Date.valueOf(date));
        userBean.setModifiedBy(currentUser.getUserId());
        userBean.setModifiedDate(timestamp);
        UserDAO userDAO = new UserDAOImpl();
        int suc = userDAO.updateUser(userBean);
         if (suc > 0){
            JOptionPane.showMessageDialog(this,"Record Updated ");
        } 
        else{
            JOptionPane.showMessageDialog(this, "Unsuccessfull Operation");
        }
    }
    
    public void populateUserTypeCombo(){
        
        userTypeCombo.addItem("Select User Type");
        for(UserType user: UserType.values() ){
            userTypeCombo.addItem(user.toString());
        }
    }
    
     public static DefaultTableModel tableModel (ResultSet rs){
        try {
            ResultSetMetaData metaData = rs.getMetaData();
            Vector<String> columnNames = new Vector<>();
            int columnCount = metaData.getColumnCount();
            System.out.print(columnCount);
            for(int column =1; column <= columnCount; column++){
                columnNames.add(metaData.getColumnName(column));
//                System.out.println("Im in");
            }
            Vector<Vector<Object>> data = new Vector<Vector<Object>>();
            while(rs.next()){
                Vector<Object> vector = new Vector<Object>();
                for(int columnIndex = 1; columnIndex <= columnCount; columnIndex++){
                    vector.add(rs.getObject(columnIndex));
                }
                data.add(vector);
            }
             return  new DefaultTableModel(data,columnNames);
        } catch (SQLException ex) {
           
        }
        return null;
    }
    
    public void populateUserTable(){
        UserDAO userDAO= new UserDAOImpl();
        ResultSet rst = userDAO.getUsers();
        userTable.setModel(tableModel(rst));
        userTable.removeColumn(userTable.getColumnModel().getColumn(0));
    }
    
    
    public void clearFields(){
        userNameTxtField.setText("");
        fullNameTxtField.setText("");
        userPassTxtField.setText("");
        NICTxtField.setText("");
        contactTxtField.setText("");
        userTypeCombo.setSelectedItem("Select User Type");
        
        
    }
    
    public Boolean validateFields(){
        Boolean valid = true;
        if(userNameTxtField.getText().isEmpty()){
            usernamelbl.setText("User Name is Required");
            usernamelbl.setForeground(Color.red);
            valid = false;
        }
        if(fullNameTxtField.getText().isEmpty()){
            fullnamelbl.setText("Full Name is required");
            fullnamelbl.setForeground(Color.red);
             valid = false;
        }
        if(userPassTxtField.getText().isEmpty()){
            passwordlbl.setText("Password is required");
            passwordlbl.setForeground(Color.red);
            valid = false;
        }
        
        if(NICTxtField.getText().isEmpty()){
            niclbl.setText("NIC Required");
            niclbl.setForeground(Color.red);
            valid = false;
        }
        if(contactTxtField.getText().isEmpty()){
            contactlbl.setText("Contact Requried");
            contactlbl.setForeground(Color.red);
            valid = false;
        
        }
        if(birthDate.getDate() == null){
            doblbl.setText("Date of Birth is required");
            doblbl.setForeground(Color.red);
            valid = false;
        }
        if(userTypeCombo.getSelectedIndex()==0){
            usertypelbl.setText("Select Account");
            usertypelbl.setForeground(Color.red);
            valid = false;
        }
        
        return valid;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField NICTxtField;
    private javax.swing.JButton addBtn;
    private javax.swing.JButton backBtn;
    private com.toedter.calendar.JDateChooser birthDate;
    private javax.swing.JLabel comboError;
    private javax.swing.JTextField contactTxtField;
    private javax.swing.JLabel contactlbl;
    private javax.swing.JButton deleteBtn;
    private javax.swing.JLabel doblbl;
    private javax.swing.JTextField fullNameTxtField;
    private javax.swing.JLabel fullnamelbl;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel niclbl;
    private javax.swing.JLabel passwordlbl;
    private javax.swing.JButton updateBtn;
    private javax.swing.JTextField userNameTxtField;
    private javax.swing.JTextField userPassTxtField;
    private javax.swing.JTable userTable;
    private javax.swing.JComboBox<String> userTypeCombo;
    private javax.swing.JLabel usernamelbl;
    private javax.swing.JLabel usertypelbl;
    // End of variables declaration//GEN-END:variables
}
